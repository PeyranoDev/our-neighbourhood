// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(AqualinaAPIContext))]
    [Migration("20250608222003_TowersIdsForUsers")]
    partial class TowersIdsForUsers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Data.Entities.Amenity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TowerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TowerId");

                    b.ToTable("Amenities");
                });

            modelBuilder.Entity("Data.Entities.AmenityAvailability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AmenityId")
                        .HasColumnType("int");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("AmenityId", "DayOfWeek");

                    b.ToTable("AmenityAvailabilities");
                });

            modelBuilder.Entity("Data.Entities.Apartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TowerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TowerId");

                    b.ToTable("Apartments");
                });

            modelBuilder.Entity("Data.Entities.AppSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BannerUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TowerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TowerId")
                        .IsUnique();

                    b.ToTable("AppSettings");
                });

            modelBuilder.Entity("Data.Entities.Invitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("Data.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TowerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TowerId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Data.Entities.NotificationToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastSeen")
                        .HasColumnType("datetime2");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationTokens");
                });

            modelBuilder.Entity("Data.Entities.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CompletedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestedById")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompletedById");

                    b.HasIndex("RequestedById");

                    b.HasIndex("VehicleId", "Status");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("VehicleId", "Status"), new[] { "CompletedAt", "RequestedAt" });

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Data.Entities.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AmenityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("AmenityId", "ReservationDate", "Status");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Data.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Security"
                        },
                        new
                        {
                            Id = 3,
                            Type = "User"
                        });
                });

            modelBuilder.Entity("Data.Entities.Tower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Towers");
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnDuty")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Data.Entities.UserTower", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("TowerId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "TowerId");

                    b.HasIndex("TowerId");

                    b.ToTable("UserTowers");
                });

            modelBuilder.Entity("Data.Entities.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsParked")
                        .HasColumnType("bit");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("Plate")
                        .IsUnique();

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Data.Entities.Amenity", b =>
                {
                    b.HasOne("Data.Entities.Tower", "Tower")
                        .WithMany("Amenities")
                        .HasForeignKey("TowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tower");
                });

            modelBuilder.Entity("Data.Entities.AmenityAvailability", b =>
                {
                    b.HasOne("Data.Entities.Amenity", "Amenity")
                        .WithMany("Availabilities")
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Amenity");
                });

            modelBuilder.Entity("Data.Entities.Apartment", b =>
                {
                    b.HasOne("Data.Entities.Tower", "Tower")
                        .WithMany("Apartments")
                        .HasForeignKey("TowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tower");
                });

            modelBuilder.Entity("Data.Entities.AppSettings", b =>
                {
                    b.HasOne("Data.Entities.Tower", "Tower")
                        .WithOne("Settings")
                        .HasForeignKey("Data.Entities.AppSettings", "TowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Data.Entities.ColorPalleteList", "Colors", b1 =>
                        {
                            b1.Property<int>("AppSettingsId")
                                .HasColumnType("int");

                            b1.Property<string>("Accent")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("AccentColor");

                            b1.Property<string>("Background")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("BackgroundColor");

                            b1.Property<string>("Primary")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PrimaryColor");

                            b1.Property<string>("Secondary")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("SecondaryColor");

                            b1.HasKey("AppSettingsId");

                            b1.ToTable("AppSettings");

                            b1.WithOwner()
                                .HasForeignKey("AppSettingsId");
                        });

                    b.Navigation("Colors")
                        .IsRequired();

                    b.Navigation("Tower");
                });

            modelBuilder.Entity("Data.Entities.Invitation", b =>
                {
                    b.HasOne("Data.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Data.Entities.News", b =>
                {
                    b.HasOne("Data.Entities.Tower", "Tower")
                        .WithMany("News")
                        .HasForeignKey("TowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tower");
                });

            modelBuilder.Entity("Data.Entities.NotificationToken", b =>
                {
                    b.HasOne("Data.Entities.User", null)
                        .WithMany("NotificationTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.Request", b =>
                {
                    b.HasOne("Data.Entities.User", "CompletedBy")
                        .WithMany("RequestsCompleted")
                        .HasForeignKey("CompletedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Data.Entities.User", "RequestedBy")
                        .WithMany("RequestsMade")
                        .HasForeignKey("RequestedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.Vehicle", "Vehicle")
                        .WithMany("Requests")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CompletedBy");

                    b.Navigation("RequestedBy");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Data.Entities.Reservation", b =>
                {
                    b.HasOne("Data.Entities.Amenity", "Amenity")
                        .WithMany("Reservations")
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", null)
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Amenity");
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.HasOne("Data.Entities.Apartment", "Apartment")
                        .WithMany("Users")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Data.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Data.Entities.UserTower", b =>
                {
                    b.HasOne("Data.Entities.Tower", "Tower")
                        .WithMany("UserTowers")
                        .HasForeignKey("TowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "User")
                        .WithMany("UserTowers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tower");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.Vehicle", b =>
                {
                    b.HasOne("Data.Entities.User", null)
                        .WithMany("OwnedCars")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.Amenity", b =>
                {
                    b.Navigation("Availabilities");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Data.Entities.Apartment", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Data.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Data.Entities.Tower", b =>
                {
                    b.Navigation("Amenities");

                    b.Navigation("Apartments");

                    b.Navigation("News");

                    b.Navigation("Settings")
                        .IsRequired();

                    b.Navigation("UserTowers");
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Navigation("NotificationTokens");

                    b.Navigation("OwnedCars");

                    b.Navigation("RequestsCompleted");

                    b.Navigation("RequestsMade");

                    b.Navigation("Reservations");

                    b.Navigation("UserTowers");
                });

            modelBuilder.Entity("Data.Entities.Vehicle", b =>
                {
                    b.Navigation("Requests");
                });
#pragma warning restore 612, 618
        }
    }
}
